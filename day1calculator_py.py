# -*- coding: utf-8 -*-
"""day1calculator.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N11e7zxtLYX7lnMYqlmy6CEVDE5s8yoz
"""



class Calculator:
    def add(self, x, y):
        return x + y

    def subtract(self, x, y):
        return x - y

    def multiply(self, x, y):
        return x * y

    def divide(self, x, y):
        if y != 0:
            return x / y
        else:
            return "Division by zero is not allowed"


def main():
    calculator = Calculator()
    while True:
        print("Options:")
        print("Enter 'add' for addition")
        print("Enter 'subtract' for subtraction")
        print("Enter 'multiply' for multiplication")
        print("Enter 'divide' for division")
        print("Enter 'quit' to end the program")
        user_input = input(": ")

        if user_input == "quit":
            break
        elif user_input in ["add", "subtract", "multiply", "divide"]:
            try:
                num1 = float(input("Enter first number: "))
                num2 = float(input("Enter second number: "))
                if user_input == "add":
                    result = calculator.add(num1, num2)
                elif user_input == "subtract":
                    result = calculator.subtract(num1, num2)
                elif user_input == "multiply":
                    result = calculator.multiply(num1, num2)
                elif user_input == "divide":
                    result = calculator.divide(num1, num2)
                print("Result:", result)
            except ValueError:
                print("Invalid input. Please enter a valid number.")
        else:
            print("Invalid input. Please enter a valid option.")


if __name__ == "__main__":
    main()

class Calculator:
    def evaluate_expression(self, expression):
        try:
            result = eval(expression)
            return result
        except (SyntaxError, NameError, ZeroDivisionError) as e:
            return f"Error: {e}"
        except Exception as e:
            return f"An error occurred: {e}"


def main():
    calculator = Calculator()
    while True:
        try:
            expression = input("Enter a mathematical expression: ")
            if expression.lower() == 'quit':
                print("Exiting the calculator...")
                break
            result = calculator.evaluate_expression(expression)
            print("Result:", result)
        except KeyboardInterrupt:
            print("\nExiting the calculator...")
            break


if __name__ == "__main__":
    main()